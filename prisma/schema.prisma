generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  nombre              String
  correo              String         @unique
  password            String?
  rol                 String?
  metodo_pago         String?
  cuenta_vendedor     String?
  creado_en           DateTime       @default(now())
  verificado          Boolean        @default(false)
  foto_perfil         String?
  rut                 String         @unique
  apellido            String
  fecha_de_nacimiento DateTime?
  clerkId             String         @id @unique
  compras             Compra[]       @relation("Comprador")
  disputas            Disputa[]      @relation("CompradorDisputa")
  notificaciones      Notificacion[]
  ticketsVendidos     Ticket[]       @relation("Vendedor")
  Valoracion          Valoracion[]
  valoraciones        Valoracion[]   @relation("VendedorValoracion")
}

model TipoEntrada {
  id          Int      @id @default(autoincrement())
  nombre      String
  descripcion String?
  precio_base Decimal
  evento_id   Int
  tickets     Ticket[]
  evento      Evento   @relation(fields: [evento_id], references: [id])
}

model Evento {
  id            Int           @id @default(autoincrement())
  nombre        String
  ubicacion     String
  fecha_evento  DateTime
  descripcion   String?
  creado_en     DateTime      @default(now())
  categoria     String
  url_foto      String?
  tickets       Ticket[]
  tipos_entrada TipoEntrada[]
}

model Ticket {
  id                Int         @id @default(autoincrement())
  evento_id         Int
  vendedor_id       String
  precio            Decimal
  estado            String
  archivo_url       String?
  fecha_creacion    DateTime    @default(now())
  fecha_vencimiento DateTime
  tipo_entrada_id   Int
  compras           Compra[]
  disputas          Disputa[]   @relation("TicketDisputa")
  evento            Evento      @relation(fields: [evento_id], references: [id])
  tipo_entrada      TipoEntrada @relation(fields: [tipo_entrada_id], references: [id])
  vendedor          Usuario     @relation("Vendedor", fields: [vendedor_id], references: [clerkId])
}

model Compra {
  id                     Int                 @id @default(autoincrement())
  ticket_id              Int
  comprador_id           String
  precio_total           Decimal
  fecha_compra           DateTime            @default(now())
  metodo_pago            String
  estado                 String
  fondos_liberados       Boolean             @default(false)
  fecha_fondos_liberados DateTime?
  confirmacion           Boolean             @default(false)
  comprador              Usuario             @relation("Comprador", fields: [comprador_id], references: [clerkId])
  ticket                 Ticket              @relation(fields: [ticket_id], references: [id])
  disputas               Disputa[]
  paymentPreferences     PaymentPreference[]
}

model Disputa {
  id             Int      @id @default(autoincrement())
  compra_id      Int
  comprador_id   String
  ticket_id      Int
  descripcion    String?
  estado         String
  fecha_creacion DateTime @default(now())
  compra         Compra   @relation(fields: [compra_id], references: [id])
  comprador      Usuario  @relation("CompradorDisputa", fields: [comprador_id], references: [clerkId])
  ticket         Ticket   @relation("TicketDisputa", fields: [ticket_id], references: [id])
}

model Valoracion {
  id             Int      @id @default(autoincrement())
  vendedor_id    String
  comprador_id   String
  puntuacion     Int
  comentario     String?
  fecha_creacion DateTime @default(now())
  comprador      Usuario  @relation(fields: [comprador_id], references: [clerkId])
  vendedor       Usuario  @relation("VendedorValoracion", fields: [vendedor_id], references: [clerkId])
}

model Notificacion {
  id             Int      @id @default(autoincrement())
  usuario_id     String
  mensaje        String
  leido          Boolean  @default(false)
  fecha_creacion DateTime @default(now())
  usuario        Usuario  @relation(fields: [usuario_id], references: [clerkId])
}

model PaymentPreference {
  id               Int      @id @default(autoincrement())
  mp_preference_id String   @unique
  compra_id        Int
  status           String
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt
  compra           Compra   @relation(fields: [compra_id], references: [id])
}
